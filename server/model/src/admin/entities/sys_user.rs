//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "sys_user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub domain_id: i64,
    pub org_id: Option<i64>,
    pub username: String,
    pub password: String,
    pub nick_name: String,
    pub avatar: Option<String>,
    pub email: Option<String>,
    pub phone: Option<String>,
    pub status: String,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::sys_domain::Entity",
        from = "Column::DomainId",
        to = "super::sys_domain::Column::Id"
    )]
    SysDomain,
    #[sea_orm(
        belongs_to = "super::sys_organization::Entity",
        from = "Column::OrgId",
        to = "super::sys_organization::Column::Id"
    )]
    SysOrganization,
    #[sea_orm(has_many = "super::sys_user_role::Entity")]
    SysUserRole,
}

impl Related<super::sys_domain::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SysDomain.def()
    }
}

impl Related<super::sys_organization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SysOrganization.def()
    }
}

impl Related<super::sys_user_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SysUserRole.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
